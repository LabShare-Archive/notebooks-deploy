apiVersion: v1
kind: ConfigMap
metadata:
  name: jupyterhub-config
data:
  jupyterhub-config.py: |
    import os,sys
    from oauthenticator.generic import GenericOAuthenticator

    c = get_config()
    c.JupyterHub.spawner_class = 'modularspawner.ModularSpawner'
    c.ModularSpawner.start_timeout=1000

    # Choose which stacks to use in modular spawner
    c.ModularSpawner.stacks_path = '/stacks/deploy/docker/notebook/stacks'
    c.ModularSpawner.base = 'BASE_STACK_VALUE'
    c.ModularSpawner.stacks = STACKS_VALUE
    c.ModularSpawner.stacks_names = STACKS_NAMES_VALUE

    # Which container to spawn
    c.ModularSpawner.default_url = '/lab'
    c.ModularSpawner.uid = 1000 #uid 1000 corresponds to jovyan, uid 0 to root
    c.ModularSpawner.cmd = ['jupyter-labhub']
    # c.ModularSpawner.args = ['--collaborative']
    c.ModularSpawner.working_dir = '/home/jovyan'
    c.ModularSpawner.service_account='jupyteruser-sa'

    # Per-user storage configuration
    c.ModularSpawner.pvc_name_template = 'claim-{username}'
    c.ModularSpawner.storage_class = 'STORAGE_CLASS_VALUE'
    c.ModularSpawner.storage_capacity = 'STORAGE_PER_USER_VALUE'
    c.ModularSpawner.storage_access_modes = ['ReadWriteOnce']
    c.ModularSpawner.storage_pvc_ensure = True

    # Volumes to attach to Pod
    c.ModularSpawner.volumes = [
        {
            'name': 'volume-{username}',
            'persistentVolumeClaim': {
                'claimName': 'claim-{username}'
            }
        },
        {
            'name': 'shared-volume',
            'persistentVolumeClaim': {
                'claimName': 'notebooks-pv-claim'
            }
        },
        {
            'name': 'wipp-volume',
            'persistentVolumeClaim': {
                'claimName': 'WIPP_STORAGE_PVC_VALUE'
            }
        }
    ]

    # Where to mount volumes
    c.ModularSpawner.volume_mounts = [
        {
            'mountPath': '/home/jovyan/work',
            'name': 'volume-{username}'
        },
        {
            'mountPath': '/opt/shared/notebooks',
            'name': 'shared-volume'
        },
        {
            'mountPath': '/opt/shared/wipp',
            'name': 'wipp-volume'
        }
    ]

    # Calculate minimal image using railyard
    import subprocess
    tag = subprocess.run(('railyard hash -b BASE_STACK_VALUE').split(' '), capture_output=True).stdout.decode("utf-8").rstrip()


    c.ModularSpawner.profile_list = [
        {
            'display_name': 'Minimal Notebook',
            'slug': 'minimal-notebook',
            'kubespawner_override': {
                'image': 'labshare/polyglot-notebook:' + tag
            }
        }, {
            'display_name': 'Streamlit Dashboard Variable App',
            'slug': 'jhsingle-streamlit-variable',  
            'kubespawner_override': {
                'image': 'swazonic/basic-images:labshare-jhsingle-streamlit-variable-sharedpv'
            }
        }, {
            'display_name': 'Voila Dashboard Variable App',
            'slug': 'jhsingle-voila-variable',  
            'kubespawner_override': {
                'image': 'swazonic/basic-images:labshare-jhsingle-voila-variable-sharedpv'
            }
        }
    ]

    c.JupyterHub.allow_named_servers=True
    c.JupyterHub.ip='0.0.0.0'
    c.JupyterHub.hub_ip='0.0.0.0'

    # Required for AWS
    c.JupyterHub.hub_connect_ip='jupyterhub-internal'

    c.JupyterHub.cleanup_servers=False
    c.JupyterHub.cookie_secret_file = '/srv/jupyterhub/jupyterhub_cookie_secret'

    OAUTH_CLIENT_ID = os.getenv('OAUTH_CLIENT_ID')
    OAUTH_CLIENT_SECRET = os.getenv('OAUTH_CLIENT_SECRET')
    ADMIN_USERS = os.getenv('ADMIN_USERS')
    ADMIN_SERVICE_ACC = os.getenv('ADMIN_SERVICE_ACC')

    c.JupyterHub.authenticator_class = GenericOAuthenticator

    # Enable Notebooks Hub dashboards
    c.JupyterHub.tornado_settings = {
        'headers': {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Headers': '*',
        'Access-Control-Allow-Methods': '*'
    },
    }
    c.NotebookApp.allow_origin = '*'
    c.NotebookApp.tornado_settings = {
    'headers': {
        'Access-Control-Allow-Headers': '*',
        'Access-Control-Allow-Methods': '*'
    },
    }
    # TODO: check to maybe remove later

    c.Authenticator.admin_users = set(ADMIN_USERS.split(';'))

    c.GenericOAuthenticator.client_id = OAUTH_CLIENT_ID
    c.GenericOAuthenticator.client_secret = OAUTH_CLIENT_SECRET
    c.GenericOAuthenticator.username_key = "email"
    c.GenericOAuthenticator.userdata_method = "GET"
    c.GenericOAuthenticator.extra_params = dict(client_id=OAUTH_CLIENT_ID, client_secret=OAUTH_CLIENT_SECRET)
    c.GenericOAuthenticator.basic_auth = False
    c.GenericOAuthenticator.auto_login = True

    # RBAC to enable RTC demo
    c.JupyterHub.load_groups = {
    'rtc': [
        'konstantin.taletskiy@labshare.org',
        'sunny.yu@nih.gov',
    ]
    }

    # Allow users in group "rtc" to access the servers of other users in that group
    c.JupyterHub.load_roles = [
    {
        'name': 'rtc-group',
        'description': 'can access other users servers in rtc group',
        'scopes': ['access:servers!group=rtc'],
        'groups': ['rtc'],
    },
    ]

    # Set up WIPP UI url for integration with WIPP
    c.ModularSpawner.environment = {
        'WIPP_UI_URL': 'WIPP_UI_VALUE',
        'WIPP_API_INTERNAL_URL': 'WIPP_API_INTERNAL_VALUE',
        'WIPP_NOTEBOOKS_PATH': 'WIPP_NOTEBOOKS_PATH_VALUE'
    }

    # Service to shutdown inactive Notebook servers after --timeout seconds
    c.JupyterHub.services = [
        {
            'name': 'cull-idle',
            'admin': True,
            'command': [sys.executable, '/srv/jupyterhub/config/cull-idle-servers.py', '--timeout=3600'],
        },
        {
            "name": "service-token",
            "admin": True,
            "api_token": ADMIN_SERVICE_ACC,
        },
    ]
---