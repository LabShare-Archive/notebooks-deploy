apiVersion: v1
kind: ConfigMap
metadata:
  name: jupyterhub-config
data:
  jupyterhub-config.py: |
    import os,sys
    import string
    import pickle
    import escapism
    from oauthenticator.generic import GenericOAuthenticator

    c = get_config()
    c.JupyterHub.spawner_class = 'kubespawner.KubeSpawner'
    c.KubeSpawner.start_timeout=1000

    c.KubeSpawner.default_url = '/lab'
    c.KubeSpawner.uid = 1000 #uid 1000 corresponds to jovyan, uid 0 to root
    c.KubeSpawner.cmd = ['jupyter-labhub']
    c.KubeSpawner.args = ['--collaborative']
    c.KubeSpawner.working_dir = '/home/jovyan'
    c.KubeSpawner.service_account='jupyteruser-sa'
    c.KubeSpawner.singleuser_image_pull_policy= 'Always'

    # Per-user storage configuration
    c.KubeSpawner.pvc_name_template = 'claim-{username}'
    c.KubeSpawner.storage_class = 'STORAGE_CLASS_VALUE'
    c.KubeSpawner.storage_capacity = 'STORAGE_PER_USER_VALUE'
    c.KubeSpawner.storage_access_modes = ['ReadWriteOnce']
    c.KubeSpawner.storage_pvc_ensure = True

    # Volumes to attach to Pod
    c.KubeSpawner.volumes = [
        {
            'name': 'volume-{username}',
            'persistentVolumeClaim': {
                'claimName': 'claim-{username}'
            }
        },
        {
            'name': 'shared-volume',
            'persistentVolumeClaim': {
                'claimName': 'notebooks-pv-claim'
            }
        },
        {
            'name': 'modules-volume',
            'persistentVolumeClaim': {
                'claimName': 'modules-pv-claim'
            }
        },
        {
            'name': 'wipp-volume',
            'persistentVolumeClaim': {
                'claimName': 'WIPP_STORAGE_PVC_VALUE'
            }
        }
    ]

    # Where to mount volumes
    c.KubeSpawner.volume_mounts = [
        {
            'mountPath': '/home/jovyan/work',
            'name': 'volume-{username}'
        },
        {
            'mountPath': '/opt/shared/notebooks',
            'name': 'shared-volume'
        },
        {
            'mountPath': '/opt/modules',
            'name': 'modules-volume',
            'readOnly': True
        },
        {
            'mountPath': '/opt/shared/wipp',
            'name': 'wipp-volume'
        }
    ]

    c.KubeSpawner.image = 'labshare/polyglot-notebook:' + 'NOTEBOOKS_DEPLOY_TAG_VALUE'

    c.KubeSpawner.profile_list = [
        {
            'display_name': 'JupyterLab',
            'slug': 'jupyterlab',
            'kubespawner_override': {
                'image': 'labshare/polyglot-notebook:' + 'NOTEBOOKS_DEPLOY_TAG_VALUE'
            }
        }, {
            'display_name': 'Streamlit Dashboard Variable App',
            'slug': 'jhsingle-streamlit-variable',  
            'kubespawner_override': {
                'image': 'polusai/hub-streamlit'
            }
        }, {
            'display_name': 'Voila Dashboard Variable App',
            'slug': 'jhsingle-voila-variable',  
            'kubespawner_override': {
                'image': 'polusai/hub-voila'
            }
        }
    ]

    c.JupyterHub.allow_named_servers=True
    c.JupyterHub.ip='0.0.0.0'
    c.JupyterHub.hub_ip='0.0.0.0'

    # Required for AWS
    c.JupyterHub.hub_connect_ip='jupyterhub-internal'

    # Configure Postgres database
    postgres_db = os.getenv('POSTGRES_DB')
    postgres_user = os.getenv('POSTGRES_USER')
    postgres_password = os.getenv('POSTGRES_PASSWORD')
    c.JupyterHub.db_url = 'postgresql://' + postgres_user + ':' + postgres_password + '@' + 'jupyterhub-postgres-service' + '/' + postgres_db

    c.JupyterHub.cleanup_servers=False
    c.JupyterHub.cookie_secret_file = '/srv/jupyterhub/jupyterhub_cookie_secret'

    OAUTH_CLIENT_ID = os.getenv('OAUTH_CLIENT_ID')
    OAUTH_CLIENT_SECRET = os.getenv('OAUTH_CLIENT_SECRET')
    ADMIN_USERS = os.getenv('ADMIN_USERS')
    ADMIN_SERVICE_ACC = os.getenv('ADMIN_SERVICE_ACC')

    c.JupyterHub.authenticator_class = GenericOAuthenticator

    c.Authenticator.admin_users = set(ADMIN_USERS.split(';'))

    c.GenericOAuthenticator.client_id = OAUTH_CLIENT_ID
    c.GenericOAuthenticator.client_secret = OAUTH_CLIENT_SECRET
    c.GenericOAuthenticator.username_key = "email"
    c.GenericOAuthenticator.userdata_method = "GET"
    c.GenericOAuthenticator.extra_params = dict(client_id=OAUTH_CLIENT_ID, client_secret=OAUTH_CLIENT_SECRET)
    c.GenericOAuthenticator.basic_auth = False
    c.GenericOAuthenticator.auto_login = True

    # Read the users and groups backed up by config-wrapper
    try:
        infile = open('users.pkl','rb')
        users = pickle.load(infile)
        infile.close()
    except:
        users = []
    
    try:
        infile = open('groups.pkl','rb')
        groups_backup = pickle.load(infile)
        infile.close()
    except:
        groups_backup = {}

    # Create RBAC groups and roles
    groups = {}
    roles = []

    safe_chars = set(string.ascii_lowercase + string.digits)
    for user in users:
        # Escape symbols not allowed in role and group names
        safe_username = escapism.escape(user, safe=safe_chars).lower()

        group = {f'server_sharing_{safe_username}': groups_backup.get(f'server_sharing_{safe_username}', [])}
        groups.update(group)

        sharing_role = {
            'name': f'server_sharing_{safe_username}_role',
            'description': f'Server sharing of {user}',
            'scopes': [f'access:servers!user={user}'],
            'groups': [f'server_sharing_{safe_username}']
        }

        sharing_group_editing_role = {
            'name': f'server_sharing_{safe_username}_group_editing_role',
            'description': f'Edit server_sharing_{safe_username} group',
            'scopes': [f'groups!group=server_sharing_{safe_username}'],
            'users': [user]
        }

        usernames_reading_role = {
            'name': f'usernames_reading_{safe_username}_role',
            'description': 'Usernames reading group',
            'scopes': ['list:users'],
            'users': [user]
        }

        roles.append(sharing_role)
        roles.append(sharing_group_editing_role)
        roles.append(usernames_reading_role)

    # Required for getting user reading scope in the JUPYTERHUB_API_TOKEN on user server
    roles.append({
        'name': 'server',
        'scopes': ['inherit'],
    })

    c.JupyterHub.load_groups = groups
    c.JupyterHub.load_roles = roles

    # Set up WIPP UI urls for integration with WIPP
    c.KubeSpawner.environment = {
        'WIPP_UI_URL': 'WIPP_UI_VALUE',
        'WIPP_API_INTERNAL_URL': 'WIPP_API_INTERNAL_VALUE',
        'WIPP_NOTEBOOKS_PATH': 'WIPP_NOTEBOOKS_PATH_VALUE',
        'PLUGIN_TEMP_PATH': 'WIPP_PLUGIN_TEMP_PATH_VALUE',
        'POLUS_NOTEBOOKS_HUB_API': 'POLUS_NOTEBOOKS_HUB_API_VALUE',
        'POLUS_NOTEBOOKS_HUB_FILE_LOGGING_ENABLED': 'POLUS_NOTEBOOKS_HUB_FILE_LOGGING_ENABLED_VALUE', #True/False
        'USER_OPTIONS': lambda spawner: str(spawner.user_options),
        'CONDA_ENVS_PATH': '/opt/modules/conda-envs/',
        'LMOD_SYSTEM_DEFAULT_MODULES': 'StdEnv'
    }

    c.JupyterHub.services = [
        {
            # Service to shutdown inactive Notebook servers after --timeout seconds
            'name': 'cull-idle', 
            'admin': True,
            'command': [sys.executable, '/srv/jupyterhub/config/cull-idle-servers.py', '--timeout=3600'],
        },
        {
            # Service admin token (used in Notebooks Hub and config-wrapper)
            "name": "service-token",
            "admin": True,
            "api_token": ADMIN_SERVICE_ACC,
        },
    ]
---